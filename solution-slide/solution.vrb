\frametitle{\btitle {無額外限制}}
延續 subtask 3，也是離線並且相同顏色的詢問一起處理，由於顏色很多，不可能每種顏色都建一個倍增表，因此需要一個能夠快速算出一條路徑上有多少東西並修改的資料結構。
^^I\pause

^^I輕重鍊剖分完全符合這個條件。但輕重鍊剖分又大又難寫，換個經典的替代方法，樹差分。
^^I\pause
^^I
^^I可以紀錄每個點 dfs 進入跟離開的時間 $in_i$ $out_i$ 做樹壓平，這樣有個性質是對於 $i$ 的子樹節點都會包含在 $in_i$ $out_i$ 之間，因此只要那個點要 + 1，我們可以在 $in_i$ 上 + 1， $out_i$ 上 - 1，如此一來，某個點 $i$ 到根節點上的路徑總和就可以用 $1$ 到 $in_i$ 的總和求得，因為需要修改，所以可以用二元索引樹(BIT)來維護。

^^I如此一來我們就可以用 subtask 3 的方式求出答案了。
